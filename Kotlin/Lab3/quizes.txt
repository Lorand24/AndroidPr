What does the !! operator do
It converts any value to a non-null type and throws an exception if the value is in fact null.
It returns the left-hand operand if the operand is not null; otherwise it returns the right hand operand.
It compares two values for identity rather than equality.
It's the modulo operator in Kotlin, similar to Java's %
Which is a valid function declaration in Kotlin?
fun sum(a: Int, b: Int): Int
int sum(a: Int, b:Int)
int sum(int a, int b)
function sum(a: Int, b: Int): Int
What about Java interoperability?
Kotlin can easily call Java code and vice versa
While Kotlin runs on the JVM, it cannot interoperate with Java
Kotlin provides a compatibility layer for Java interoperability which comes with some cost at runtime
Kotlin can easily call Java code while Java cannot access code written in Kotlin
Does Kotlin have primitive data types, such as int, long, float?
No, not at language level. But the Kotlin compiler makes use of JVM primitives for best performance
No, Kotlin does not have nor use primitive data types
Yes, Kotlin is similar to Java in this respect
Yes, but Kotlin internally always converts them to their non-primitive counterparts
What is the correct syntax to convert the String "42" to a Long in Kotlin?
val l: Long = "42".toLong()
val l: Long = <Long>"42"
val l: Long = Long.ParseLong("42")
val l: Long = (Long)"42"
What is the correct way to declare a variable of integer type in Kotlin?
var i: Int = 42
int i = 42
var i : int = 42
let i = 42
What are Kotlin coroutines?
They provide asynchronous code without thread blocking
It's Kotlin's term for class methods
That's how the automatically generated methods hashcode() and equals() in data classes are called
These are functions which accept other functions as arguments or return them
What is the difference between val and var in Kotlin?
Variables declared with val are final, those with var are not
Variables declared with var are final, those with val are not
Variables declared with val can only access const members
var is scoped to the nearest function block and val is scoped to the nearest enclosing block
Which of these targets does Kotlin currently not support?
.NET CLR
JavaScript
LLVM
JVM
What does a data class not offer?
Automatic conversion from/to JSON
A generated copy(...) method, to create copies of instances
Auto-generated hashCode() and equals() methods
An auto-generated toString() method